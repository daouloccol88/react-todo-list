{"version":3,"sources":["components/TodoInput.js","components/Timer.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","Component","Timer","state","timerStarted","timerStopped","hours","minutes","seconds","e","preventDefault","timer","setInterval","setState","prevState","clearInterval","onClick","handleTimerStart","bind","handleTimerStop","handleTimerReset","TodoItem","title","handleDelete","handleEdit","TodoList","items","clearList","map","key","id","App","uuid","target","newItem","updatedItems","filteredItems","filter","selectedItem","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16368c9d.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class TodoInput extends Component {\n    render() {\n        const {item, handleChange, handleSubmit, editItem} = this.props\n        return(\n            <div className=\"card card-body card-1 my-3\">\n                <form onSubmit={handleSubmit}>\n                    <div className=\"input-group\">\n                        <div className=\"input-group-prepend\">\n                            <div className=\"input-group-text bg-primary text-white\">\n                                <i className=\"fas fa-book\"></i>\n                            </div>\n                        </div>\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Ajouter un élément à la liste\" value={item} onChange={handleChange}/>\n                    </div>\n                    <button type=\"submit\" className={editItem ?\"btn btn-block btn-success mt-3\":\"btn btn-block btn-primary mt-3\"}> \n                        {editItem ? \"Editez un élément\" :\"Ajouter un élément\"}\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\n\nexport default class Timer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timerStarted: false,\n            timerStopped: true,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n        }\n    }\n\n    handleTimerStart (e) {\n        e.preventDefault();\n\n        if(this.state.timerStopped) {\n            this.timer = setInterval(() => {\n                this.setState({timerStarted: true, timerStopped: false});\n                if(this.state.timerStarted) {\n                    if(this.state.seconds >= 60) {\n                        this.setState((prevState) => ({minutes: prevState.minutes +1, seconds: 0}))\n                    }\n                    if(this.state.minutes >= 60) {\n                        this.setState((prevState) => ({hours: prevState.hours+1, minutes: 0,seconds: 0}))\n                    }\n                    this.setState((prevState) => ({ seconds: prevState.seconds +1 }))\n                }\n            }, 1000)\n        }\n\n    }\n\n    handleTimerStop (e) {\n        e.preventDefault();\n\n        this.setState({timerStarted:false, timerStopped: true});\n        clearInterval(this.timer);\n    }\n\n    handleTimerReset (e) {\n        e.preventDefault();\n        this.setState({timerStarted: false, timerStopped: true, seconds: 0, minutes: 0, hours: 0});\n        clearInterval(this.timer)\n    }\n\n    render() {\n        return(\n            <div className=\"container\">\n                <div className=\"text-center\"><h3>{this.state.hours + \":\" + this.state.minutes + \":\" + this.state.seconds}</h3></div>\n                <div className=\" row\">\n                <div className=\"col-4\"><span><button type=\"submit\" className=\"btn btn-block btn-success btn-primary mt-3\" onClick={this.handleTimerStart.bind(this)}>Démarrer le Timer</button></span></div>\n                <div className=\"col-4\"><span><button type=\"submit\" className=\"btn btn-block btn-danger btn-primary mt-3\" onClick={this.handleTimerStop.bind(this)}>Arrêter le Timer</button></span></div>\n                <div className=\"col-4\"><span><button type=\"submit\" className=\"btn btn-block btn-warning btn-primary mt-3\" onClick={this.handleTimerReset.bind(this)}>Reset le Timer</button></span></div>\n            </div> \n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Timer from './Timer';\n\n\nexport default class TodoItem extends Component {\n    render() {\n        const {title, handleDelete, handleEdit} = this.props\n        return (\n            <li className=\"list-group-item text-capitalize card-1 my-2\">\n                <div className=\"d-flex justify-content-between\">\n                    <h5>{title}</h5>\n                    <div className=\"todo-icon\">\n                        <span className=\"mx-2 text-success\" onClick={handleEdit}><i className=\"fas fa-pen\"></i></span>\n                        <span className=\"mx-2 text-danger\" onClick={handleDelete}><i className=\"fas fa-trash\"></i></span>\n                    </div>\n                </div>\n                <Timer></Timer>\n            </li>\n        )\n    }\n}","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\n\nexport default class TodoList extends Component {\n    render() {\n        const {items, clearList, handleDelete, handleEdit} = this.props\n        return(\n            <div>\n                <ul className=\"list-group my-5\">\n                    <h3 className=\"text-capitalize text-center\">Todo Liste</h3>\n                    {\n                        items.map(item => {\n                            return(\n                                <TodoItem \n                                key={item.id} \n                                title={item.title}\n                                handleDelete={ () => handleDelete(item.id)}\n                                handleEdit={ () => handleEdit(item.id)}\n                                ></TodoItem>\n                            )\n                        })\n                    }\n                    <button type=\"button\" className=\"btn btn-danger btn-block text-capitalize mt-5\"\n                    onClick = {clearList}\n                    >Effacer la liste</button>\n                </ul>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\nimport './App.css'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {v1 as uuid }from \"uuid\";\n\nclass App extends Component{\n  state = {\n    items: [],\n    id: uuid(),\n    item: \"\",\n    editItem: false\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      item: e.target.value\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const newItem = {\n      id:this.state.id,\n      title: this.state.item\n    }\n\n  const updatedItems = [...this.state.items, newItem];\n\n  this.setState({\n    items: updatedItems,\n    item: '',\n    id: uuid(),\n    editItem: false\n  })\n};\n\nclearList = () => {\n  this.setState({\n    items:[]\n  })\n};\n\nhandleDelete = (id) => {\n  const filteredItems = this.state.items.filter(item => item.id!== id);\n\n  this.setState({\n    items: filteredItems\n  })\n}\n\nhandleEdit = (id) =>{\n  const filteredItems = this.state.items.filter(item => item.id!== id);\n  const selectedItem = this.state.items.find( item => item.id ===id);\n\n  this.setState({\n    items: filteredItems,\n    item: selectedItem.title,\n    editItem: true,\n    id:id\n  })\n}\n  \n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-capitalize text-center\">\n              Todo Input\n            </h3>\n          <TodoInput item={this.state.item} handleChange={this.handleChange} handleSubmit={this.handleSubmit} editItem={this.state.editItem}></TodoInput>\n          <TodoList items={this.state.items} clearList={this.clearList} handleDelete={this.handleDelete} handleEdit={this.handleEdit}></TodoList>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}